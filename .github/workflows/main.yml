name: Continuous Integration Pipeline

on: [push]

jobs:
  lint-and-security-check:
    name: Lint and Security Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 safety

    - name: Run linter
      run: flake8 .

    - name: Check security
      run: safety check

  build-and-push:
    needs: lint-and-security-check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Packer
        uses: hashicorp/setup-packer@v1.0.4
        with:
          packer-version: '1.9.4' # Sp√©cifiez ici la version de Packer que vous utilisez
      - name: Initialize Packer
        run: packer init voting-app.pkr.hcl
      - name: Format Packer configuration
        run: packer fmt voting-app.pkr.hcl
      - name: Validate Packer configuration
        run: packer validate voting-app.pkr.hcl
      - name: Build the Docker image with Packer
        run: packer build voting-app.pkr.hcl
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      - name: Push Docker image to Docker Hub
        run: docker push username/myimage:tag


  # BONUS: Semantic Release and Docker tagging
  semantic-release:
    name: Semantic Release and Docker Tagging
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Semantic Release
      uses: cycjimmy/semantic-release-action@v2
      with:
        branch: master
        extra_plugins: |
          @semantic-release/exec
          @semantic-release/git
        semantic_version: ${{ needs.build-and-push.outputs.semver }}

    - name: Tag Docker image with SemVer
      run: |
        IMAGE_ID=docker.io/${{ secrets.DOCKER_HUB_USERNAME }}/myapp
        SEMVER=${{ needs.semantic-release.outputs.new_release_published }}

        if [ "$SEMVER" != "" ]; then
          docker tag myapp:latest $IMAGE_ID:$SEMVER
          docker push $IMAGE_ID:$SEMVER
        fi
